<?php
/*************************************************************************
 * 	No nativo de wordpress.
 * -----------------------------------------------------------------------
 *	Crea un arbol multicamino ascendente recursivo.
 * -----------------------------------------------------------------------
 * 	Creado por: Helynai Elizabeth Chuc Maldonado.
 *************************************************************************/
class HelyTree
{
	private $Node;
	private $LastNode;
	private $Root;
	private $DadList;
	private $Buffer;
	private $LevelAction;
	
	public function __construct()
	{
		$this->DadList = array();
		$this->Root = new HelyTreeNode();
		$this->Buffer = '';
		$this->LevelAction = array();
	}
	
	/*************************************************************************
	 * 	No nativo de wordpress.
	 * -----------------------------------------------------------------------
	 * 	Creación de un arbol multicamino ascendente recursivo
	 * -----------------------------------------------------------------------
	 *	Los datos son de tipo ascendente recursivo por lo tanto el árbol
	 *	multicamino que se generará es de tipo ascendente recursivo. Los nodos
	 *  que se crean son nodos anonimos o padres y nodos conocidos o hijos, por 
	 *	la forma en que wordpress almacena sus datos en el array.
	 *
	 *	1)	Siempre se intentará crear el nodo hijo puesto que es el nodo que
	 *		más información tiene. 
	 *		
		 *		1.1 el prospecto de nodo debe buscarse a si mismo en el 
		 *			contenedor de nodos padre sin definiciones.
		 *		1.2 Si existe en el contenedor entonces se obtiene la 
		 *			direccion de memoria y se define el campo info 
		 *		1.3 si no existe registro, entonces se genera un nuevo 
		 *			nodo con datos.
		 *		1.4 se procede a verificar si contiene un padre o si 
		 *			es la raiz(no contiene padre).
		 *		1.5 si es la raiz entonces se agrega como padre al contenedor 
		 *			de padres.
	 *		
	 *	2)	si este nodo contiene un padre entonces
		 *		2.0 El padre se busca en el contenedor, si existe se obtiene 
		 *			la dirección de memoria para agregarle hijos.
		 *		2.1 De lo contrario se reserva el espacio de memoria del padre 
		 *			sin definirlo
		 *		2.2 se agrega el nodo hijo al espacio del nodo padre
		 *		2.3 se registra el nombre del padre al hijo
		 *		2.4 se agrega al contenedor de padres 
	 * ----------------------------------------------------------------------
	 * 	NOTA: Los nodos con padre nunca se agregan directamente al contenedor
	 *	los padres son los que se agregan directamente.
	 * -----------------------------------------------------------------------
	 *	Creado por: Helynai Elizabeth Chuc Maldonado.
	 *************************************************************************/
	public function createBottomTopNode($name, $childName, $childInfo)
	{
		$tmpObj2 = null;
		if(array_key_exists($childName, $this->DadList))
		{
			$tmpObj2 = $this->DadList[$childName];
			//unset($this->DadList[$childName]);
		}
		else
		{
			$tmpObj2 = new HelyTreeNode(); 
			$tmpObj2->setName($childName);
		}
		
		$tmpObj2->setInfo($childInfo);
		$this->createDadNode($name, $tmpObj2, $childName);
	}
	
	private function createDadNode($name, $tmpObj2, $childName)
	{
		if($name === 0)
		{
			$this->DadList[$childName] = $tmpObj2;
			return;
		}

		$tmpObj2->setDad($name);
		$tmpObj = null;
		
		if(array_key_exists($name, $this->DadList))
		{
			$tmpObj = $this->DadList[$name]; // para agregar multiples hijos
		}
		else
		{
			$tmpObj = new HelyTreeNode(); // no existe creamos la direccion de memoria
			$tmpObj->setName($name);
			$this->DadList[$name] = $tmpObj;
		}

		$tmpObj->setChild($tmpObj2, $childName); // por la referencia de memoria esto funciona
		
	}
	
	public function getDeep()
	{
		
	}
	
	/*************************************************************************
	 * 	No nativo de wordpress.
	 * -----------------------------------------------------------------------
	 *	Recorrido del arbol multicamino
	 * -----------------------------------------------------------------------
	 *	Se recorre el arbol de forma Preorden, considere que no es un arbol
	 *	binario.
	 *	Visite la raíz
	 *  Atraviese el sub-árbol izquierdo
	 *  Atraviese el sub-árbol derecho
	 * -----------------------------------------------------------------------
	 * 	Creado por: Helynai Elizabeth Chuc Maldonado.
	 *************************************************************************/
	public function treeTraversal()
	{
		#echo($this->DadList[1550]->getChild()[1554]->getInfo());
		#echo($this->DadList[1550]->getInfo());
		#$tugaPie = $this->Root->getAnonChild();
		$this->Root->setChildElements($this->DadList);
		$this->nodeTraversal($this->Root);
	}
	# calcular profundiad
	# paso de funciones anonimas
	# probar menu
	# acomodar el codigo
	# limpiar comentarios	
	private function nodeTraversal($object, $level = null)
	{
		if($object->isEmpty())
		{
			// do not print or do some stuff here
			return;
		}
		else
		{
			$tugaPie = $this->getChild($object);
			foreach($tugaPie as $patitasDeTuga)
			{
				if($patitasDeTuga->getDad() === '')
				{
					$level  = 1;
					echo $patitasDeTuga->getInfo()->title . "<br>";
				}
				else
				{
					$level++;
					echo "---" . $patitasDeTuga->getInfo()->title  . "<br>";
				}
				$this->nodeTraversal($patitasDeTuga, $level);			
			}
		}
	}
	
	private function getChild($object)
	{
		if(count($object->getChild()) > 0)
		{
			return $object->getChild();
		}
		elseif(count($object->getAnonChild()) > 0)
		{
			return $object->getAnonChild();
		}
		else
		{
			return array();
		}
	}

	/*************************************************************************
	 * 	No nativo de wordpress.
	 * -----------------------------------------------------------------------
	 *	public stuff to be used by a tuga.
	 * -----------------------------------------------------------------------
	 * 	Creado por: Helynai Elizabeth Chuc Maldonado.
	 *************************************************************************/
	public function isEmpty()
	{
		 return $this->Root === null;
	}
	
	public function printAll()
	{
		echo "<em>";
		var_dump($this->DadList);
		echo "</em>";
	}
	
	public function setLevelActions(array $levelAction)
	{
		$this->LevelAction = $levelAction;
	}
}